generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_LINK")
}

// Bus model

model Bus {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String
  amenities Amenities
  nr_of_seats Int

  routes Route[]
}

type Amenities {
    wifi Boolean
    wc Boolean
    ac Boolean
    socket Boolean
    minibar Boolean
    multimedia Boolean
}

// Route model

model Route {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  stops Stop[]
  bus_id String @db.ObjectId

  bus Bus @relation(fields: [bus_id], references: [id])
  travels Travel[] @relation()
}

type Stop {
  country String
  city String
  lat String?
  lon String?
  hours Int
  is_destination Boolean
}

// Travel model

model Travel {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  departure DateTime
  route_id String @db.ObjectId
  reserved_seats Int @default(0)

  route Route @relation(fields: [route_id], references: [id])
  orders Order[] @relation()
}

// User model

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  firstname String
  lastname String
  email String @unique
  password String
  dob String?
  phone_number String?
  role Role @default(USER)
  
  orders Order[]
}

enum Role {
  USER
  ADMIN
}

// Price model

model Price {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    from String
    to String
    price_sheet PriceSheet
}

type PriceSheet {
  adult Int
  student Int
  child Int
}

// LuggagePrice model

model LuggagePrice {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    price Int
}

// Order model

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  public_id String @unique
  travel_id String @db.ObjectId
  passengers Passanger[]
  user_id String? @db.ObjectId
  contact_details ContactDetails
  order_date DateTime @default(now())
  departure_place OrderStop
  arrival_place OrderStop
  arrival_date DateTime
  departure_date DateTime

  travel Travel @relation(fields: [travel_id], references: [id])
  user User? @relation(fields: [user_id], references: [id])
}

type OrderStop {
  city String
  country String
  label Label
}

type Passanger {
  firstname String
  lastname String
  price OrderPrice
}

enum CurrencyTitle {
  MDL
  CHF
  EUR
}

type OrderPrice {
  currency CurrencyTitle
  value Int
}

type ContactDetails {
  phone_number String
  email String
}

// Reset password token model

model Token {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  lang Lang
  expiresAt DateTime
}

enum Lang {
  en
  ro
  fr
  ru
}

// City model

model City {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  value String
  label Label
}

type Label {
  en String
  ro String
  fr String
  ru String
}

// Currency model

model Currency {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String @unique
  value Float
  last_update DateTime @default(now())
}

// ReminderEmail model

model ReminderEmail {
  id String @id @map("_id")
  passengers Passanger[]
  contact_details ReminderEmailContactDetails
  send_date DateTime
  contact_email String
  departure_date String
  arrival_date String
  departure_place String
  arrival_place String
  lang Lang
}

type ReminderEmailContactDetails {
  name String
  phone_number String
}